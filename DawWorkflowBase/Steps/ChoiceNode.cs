using DawWorkflowBase.Conditions;
using DawWorkflowBase.Context;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DawWorkflowBase.Steps
{

    public class ChoiceNode<TContext,TOutputContext> : AStep<TContext, TOutputContext> where TContext : IContext where TOutputContext: IContext
    {
        public IStep PassNode;
        public IStep ErrorNode;
        

        public ChoiceNode() : base()
        {

        }

        public ChoiceNode(Action<TContext> action)
        {
            MyAction = action;
        }



        public void SetNext(Condition<TContext> condition, Steps.AStep<TContext, TOutputContext> outStep) 
        {
            Links.LinkInstance<TContext, TOutputContext> linkInstance = new Links.LinkInstance<TContext, TOutputContext>(condition, outStep);
            ResultLinks.Add(linkInstance);
        }

        public void SetNext(Func<TContext, bool> func, Steps.AStep<TContext,TContext> outStep)
        {
            var condition = new Condition<TContext>(func, "autogenerated");
            Links.LinkInstance<TContext, TOutputContext> linkInstance = new Links.LinkInstance<TContext,TOutputContext>(condition, outStep);
            ResultLinks.Add(linkInstance);
        }

        public void SetNext(Func<TContext, bool> func, string conditionName, Steps.AStep<TContext,TContext> outStep)
        {
            var condition = new Condition<TContext>(func) { CName = conditionName };
            Links.LinkInstance<TContext, TOutputContext> linkInstance = new Links.LinkInstance<TContext, TOutputContext>(condition, outStep);
            ResultLinks.Add(linkInstance);
        }

    }
}
