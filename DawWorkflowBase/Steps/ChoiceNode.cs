using DawWorkflowBase.Conditions;
using DawWorkflowBase.Context;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DawWorkflowBase.Steps
{

    public class ChoiceNode<TContext> : AStep<TContext> where TContext : IContext
    {
        public IStep PassNode;
        public IStep ErrorNode;
        

        public ChoiceNode() : base()
        {

        }

        public ChoiceNode(Action<TContext> action)
        {
            MyAction = action;
        }


        public void SetNext(Condition<TContext> condition, string conditionName, Steps.AStep<TContext> outStep) 
        {
            condition.CName = conditionName;
            Links.LinkInstance<TContext> linkInstance = new Links.LinkInstance<TContext>(condition, outStep);
            ResultLinks.Add(linkInstance);
        }

        public void SetNext(Func<TContext, bool> func, Steps.AStep<TContext> outStep)
        {
            var condition = new Condition<TContext>(func, "autogenerated");
            Links.LinkInstance<TContext> linkInstance = new Links.LinkInstance<TContext>(condition, outStep);
            ResultLinks.Add(linkInstance);
        }

        public void SetNext(Func<TContext, bool> func, string conditionName, Steps.AStep<TContext> outStep)
        {
            var condition = new Condition<TContext>(func) { CName = conditionName };
            Links.LinkInstance<TContext> linkInstance = new Links.LinkInstance<TContext>(condition, outStep);
            ResultLinks.Add(linkInstance);
        }


        public void SetNextOC<OtherContext>(Func<TContext, bool> func, string conditionName, Func<TContext, OtherContext> translator, Steps.AStep<OtherContext> outStep) where OtherContext: IContext
        {
            var condition = new Condition<TContext>(func) { CName = conditionName };
            Links.LinkInstance<OtherContext> linkInstance = new Links.LinkInstance<OtherContext>(new Condition<OtherContext>() { IsEndPoint = true, Func = (oc) => true }, outStep);
            outStep.StepContext = translator.Invoke(StepContext);
            base.ForeignContexLink = linkInstance;
            base.ForeignType = linkInstance.GetType();
        }

    }
}
